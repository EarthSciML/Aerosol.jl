var documenterSearchIndex = {"docs":
[{"location":"api/#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/#API-Documentation","page":"API","title":"API Documentation","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [Aerosol, Aerosol.ISORROPIA]","category":"page"},{"location":"api/#Aerosol.ISORROPIA.Isorropia","page":"API","title":"Aerosol.ISORROPIA.Isorropia","text":"Isorropia(t)\n\nAn implementation of ISORROPIA II, a model for the thermodynamic equilibrium of gas-aerosol interactions, as described in:\n\nFountoukis, C. and Nenes, A., 2007. ISORROPIA II: a computationally efficient thermodynamic equilibrium model for K+–Ca 2+–Mg 2+–NH 4+–Na+–SO 4 2−–NO 3−–Cl−–H 2 O aerosols. Atmospheric Chemistry and Physics, 7(17), pp.4639-4659.\n\n\n\n\n\n","category":"type"},{"location":"isorropia/examples/#Running-the-model","page":"Examples","title":"Running the model","text":"","category":"section"},{"location":"isorropia/examples/","page":"Examples","title":"Examples","text":"Let's run some simulations!","category":"page"},{"location":"isorropia/examples/","page":"Examples","title":"Examples","text":"using Aerosol\nusing EarthSciMLBase\nusing ModelingToolkit, Catalyst, DifferentialEquations\nusing Plots, Latexify, Unitful\n\n@variables t [unit = u\"s\", description = \"Time\"]\n\nmodel = Isorropia(t);\n\nsys = structural_simplify(get_mtk(model))\nnothing # hide","category":"page"},{"location":"isorropia/examples/#Variables","page":"Examples","title":"Variables","text":"","category":"section"},{"location":"isorropia/examples/","page":"Examples","title":"Examples","text":"First, we need to extract some variables and parameters from our model to work with:","category":"page"},{"location":"isorropia/examples/","page":"Examples","title":"Examples","text":"@unpack Na_aq, SO4_aq, SO4_g, NH3_aq, NH3_g, NO3_aq, Cl_aq, NaCl_s, MgNO32_s, HNO3_g,\n    Ca_aq, K_aq, Mg_aq, H_aq, NH4_aq, HCl_g, K2SO4_s, KNO3_s, CaNO32_s, HNO3_g, HNO3_aq,\n    KHSO4_s, KCl_s, NH4NO3_s, CaSO4_s, CaCl2_s, MgSO4_s, MgCl2_s, NH4HSO4_s,\n    NH42SO4_s, NH43HSO42_s, NH4Cl_s, NaHSO4_s, Na2SO4_s, NaNO3_s, HSO4_aq, HCl_aq,\n    RH, metastable, W = sys\nnothing # hide","category":"page"},{"location":"isorropia/examples/#Helper-functions","page":"Examples","title":"Helper functions","text":"","category":"section"},{"location":"isorropia/examples/","page":"Examples","title":"Examples","text":"Then, we need to create some helper functions:","category":"page"},{"location":"isorropia/examples/","page":"Examples","title":"Examples","text":"Molar masses:","category":"page"},{"location":"isorropia/examples/","page":"Examples","title":"Examples","text":"mw = Dict(Na_aq => 22.989769, SO4_aq => 96.0636, SO4_g => 96.0636, NH3_aq => 17.03052, NH3_g => 17.03052,\n    NO3_aq => 62.0049, Cl_aq => 35.453, NaCl_s => 58.44,\n    Ca_aq => 40.078, K_aq => 39.0983, Mg_aq => 24.305, H_aq => 1.00784, NH4_aq => 18.04, HCl_g => 36.46,\n    K2SO4_s => 174.259, KNO3_s => 101.1032, CaNO32_s => 164.1, HNO3_g => 63.01, HNO3_aq => 63.01,\n    KHSO4_s => 136.169, KCl_s => 74.5513, NH4NO3_s => 80.043) # g/mol\nnothing # hide","category":"page"},{"location":"isorropia/examples/","page":"Examples","title":"Examples","text":"Molecules for checking mass balance:","category":"page"},{"location":"isorropia/examples/","page":"Examples","title":"Examples","text":"K_molecs = [(1, K_aq), (1, KHSO4_s), (2, K2SO4_s), (1, KNO3_s), (1, KCl_s)]\nCa_molecs = [(1, Ca_aq), (1, CaSO4_s), (1, CaNO32_s), (1, CaCl2_s)]\nMg_molecs = [(1, Mg_aq), (1, MgSO4_s), (1, MgNO32_s), (1, MgCl2_s)]\nNH_molecs = [(1, NH4_aq), (1, NH3_aq), (1, NH3_g), (1, NH4HSO4_s),\n    (2, NH42SO4_s), (3, NH43HSO42_s), (1, NH4Cl_s), (1, NH4NO3_s)]\nNa_molecs = [(1, Na_aq), (1, NaHSO4_s), (2, Na2SO4_s), (1, NaCl_s), (1, NaNO3_s)]\nSO4_molecs = [(1, SO4_aq), (1, HSO4_aq), (1, SO4_g),\n    (1, KHSO4_s), (1, NaHSO4_s), (1, NH4HSO4_s), (1, CaSO4_s), (1, Na2SO4_s), (1, NH42SO4_s),\n    (2, NH43HSO42_s), (1, K2SO4_s), (1, MgSO4_s)]\nNO3_molecs = [(1, NO3_aq), (1, HNO3_aq), (1, HNO3_g), (1, NH4NO3_s), (1, NaNO3_s)]\nCl_molecs = [(1, Cl_aq), (1, HCl_aq), (1, HCl_g), (1, NH4Cl_s),\n    (1, NaCl_s), (2, CaCl2_s), (1, KCl_s), (2, MgCl2_s)]\nH_molecs = [(1, H_aq), (1, HNO3_g), (1, HCl_g), (1, HCl_aq), (1, HSO4_aq)]\nnothing # hide","category":"page"},{"location":"isorropia/examples/","page":"Examples","title":"Examples","text":"Function to run a sweep through a range of relative humidities:","category":"page"},{"location":"isorropia/examples/","page":"Examples","title":"Examples","text":"function run_rh_sweep(sys, RHs, ics; mstable=0)\n    defaults = ModelingToolkit.get_defaults(sys)\n    u₀ = Dict{Any,Float64}([s => 1.0e-15 for s ∈ states(sys)])\n    for k ∈ keys(ics)\n        u₀[k] = ics[k] / 1e6 / mw[k] # ug/m3 / (1e6 ug/g) / g/mol = mol/m3\n    end\n    u₀[H_aq] = 2 * u₀[SO4_aq]\n    p = Dict{Any,Float64}([p => defaults[p] for p ∈ parameters(sys)])\n    p[metastable] = mstable\n\n    sols = []\n    for rh in RHs\n        p[RH] = rh\n        local prob = ODEProblem(sys, u₀, (0, 100.0), p)\n        local sol = solve(prob, Rosenbrock23(), abstol=1e-12, reltol=1e-12)\n        push!(sols, sol)\n    end\n    return u₀, sols\nend\nnothing # hide","category":"page"},{"location":"isorropia/examples/","page":"Examples","title":"Examples","text":"Function to make plots of our relative humidity sweep:","category":"page"},{"location":"isorropia/examples/","page":"Examples","title":"Examples","text":"function plot_rh_sweep(RHs, u₀, sols, plotvars)\n    p1 = plot(RHs, [sols[i][W][end] * 1e9 for i ∈ 1:length(RHs)], ylim=(0, 50),\n    ylabel=\"H2O (ug/m3)\", xlabel=\"Relative humidity (%)\", label=:none)\n    ps = []\n    for v in plotvars\n        push!(ps, plot(RHs, [sols[i][v][end] * 1e6 * mw[v] for i ∈ 1:length(RHs)],\n            ylabel=\"$v (ug/m3)\", xlabel=\"Relative humidity (%)\", label=:none))\n    end\n    plot(p1, ps...)\nend\nnothing # hide","category":"page"},{"location":"isorropia/examples/","page":"Examples","title":"Examples","text":"Functions to make mass balance plots:","category":"page"},{"location":"isorropia/examples/","page":"Examples","title":"Examples","text":"function plot_mass(RHs, molecs, u₀, sols, title; kwargs...)\n    y₀ = zeros(length(RHs))\n    y = zeros(length(RHs), length(molecs))\n    lab = []\n    for (j, (s, x)) in enumerate(molecs)\n        y₀ .+= s * u₀[x]\n        y[:, j] = s .* [sols[i][x][end] for i ∈ 1:length(RHs)]\n        push!(lab, string(x))\n    end\n    p1 = plot(ylabel=\"$(title) (mol/m3)\", xlabel=\"Relative humidity (%)\"; kwargs...)\n    areaplot!(p1, RHs, y, label=permutedims(lab))\n    plot!(p1, RHs, y₀, label=\"u₀ $(title)\", color=:black, linewidth=2)\nend\n\nfunction plot_all_masses(RHs, u₀, sols)\n    plot(\n        plot_mass(RHs, K_molecs, u₀, sols, \"K\"),\n        plot_mass(RHs, Ca_molecs, u₀, sols, \"Ca\"),\n        plot_mass(RHs, Mg_molecs, u₀, sols, \"Mg\"),\n        plot_mass(RHs, NH_molecs, u₀, sols, \"NH\"),\n        plot_mass(RHs, Na_molecs, u₀, sols, \"Na\"),\n        plot_mass(RHs, SO4_molecs, u₀, sols, \"SO4\"),\n        plot_mass(RHs, NO3_molecs, u₀, sols, \"NO3\"),\n        plot_mass(RHs, Cl_molecs, u₀, sols, \"Cl\"),\n        plot_mass(RHs, H_molecs, u₀, sols, \"H\"),\n        size=(1000, 800)\n    )\nend\nnothing # hide","category":"page"},{"location":"isorropia/examples/#Urban-aerosol","page":"Examples","title":"Urban aerosol","text":"","category":"section"},{"location":"isorropia/examples/","page":"Examples","title":"Examples","text":"Let's try reproducing Figure 6 by Fountoukis and Nenes (2007). This case represents an urban aerosol with the following initial conditions:","category":"page"},{"location":"isorropia/examples/","page":"Examples","title":"Examples","text":"RHs = [10, 25, 40, 55, 65, 70, 75, 80, 85, 90] ./ 100.0\nics = Dict([Na_aq => 0, SO4_g => 10, NH3_g => 3.4, HNO3_g => 2, HCl_g => 0,\n    Ca_aq => 0.4, K_aq => 0.33, Mg_aq => 1e-20]) # ug/m3\nu₀, sols = run_rh_sweep(sys, RHs, ics);\nnothing # hide","category":"page"},{"location":"isorropia/examples/","page":"Examples","title":"Examples","text":"plot_rh_sweep(RHs, u₀, sols, [K_aq, NH4_aq, NO3_aq])","category":"page"},{"location":"isorropia/examples/","page":"Examples","title":"Examples","text":"If you compare it to the paper, it doesn't match exactly, but we're getting there. Below is a plot of the partitioning between different molecules for each element or ion, with the black line showing the initial concentration:","category":"page"},{"location":"isorropia/examples/","page":"Examples","title":"Examples","text":"plot_all_masses(RHs, u₀, sols)","category":"page"},{"location":"isorropia/examples/#Marine-aerosol","page":"Examples","title":"Marine aerosol","text":"","category":"section"},{"location":"isorropia/examples/","page":"Examples","title":"Examples","text":"Here's our representation of Figure 7 from the paper, representing a marine aerosol case:","category":"page"},{"location":"isorropia/examples/","page":"Examples","title":"Examples","text":"ics = Dict([Na_aq => 3, SO4_g => 3, NH3_g => 0.02, HNO3_g => 2, HCl_g => 3.121,\n    Ca_aq => 0.360, K_aq => 0.450, Mg_aq => 0.130]) # ug/m3\nu₀, sols = run_rh_sweep(sys, RHs, ics);\nnothing # hide","category":"page"},{"location":"isorropia/examples/","page":"Examples","title":"Examples","text":"plot_rh_sweep(RHs, u₀, sols, [K_aq, NH4_aq, NO3_aq])","category":"page"},{"location":"isorropia/examples/","page":"Examples","title":"Examples","text":"plot_all_masses(RHs, u₀, sols)","category":"page"},{"location":"isorropia/examples/#Non-urban-continental-aerosol","page":"Examples","title":"Non-urban continental aerosol","text":"","category":"section"},{"location":"isorropia/examples/","page":"Examples","title":"Examples","text":"Here's our representation of Figure 8 from the paper, representing a non-urban continental aerosol case:","category":"page"},{"location":"isorropia/examples/","page":"Examples","title":"Examples","text":"ics = Dict([Na_aq => 0.2, SO4_g => 2.0, NH3_g => 8.0, HNO3_g => 12, HCl_g => 0.2,\n    Ca_aq => 0.120, K_aq => 0.180, Mg_aq => 0.000]) # ug/m3\nu₀, sols = run_rh_sweep(sys, RHs, ics);\nnothing # hide","category":"page"},{"location":"isorropia/examples/","page":"Examples","title":"Examples","text":"plot_rh_sweep(RHs, u₀, sols, [K_aq, NH4_aq, NO3_aq])","category":"page"},{"location":"isorropia/examples/","page":"Examples","title":"Examples","text":"plot_all_masses(RHs, u₀, sols)","category":"page"},{"location":"isorropia/examples/#Stable-and-metastable-solutions","page":"Examples","title":"Stable and metastable solutions","text":"","category":"section"},{"location":"isorropia/examples/","page":"Examples","title":"Examples","text":"Finally, here is our representation of Figure 9 from the paper, showing metastable behavior (where RH is decreasing and salts become supersaturated) vs. stable behavior (where solids can form):","category":"page"},{"location":"isorropia/examples/","page":"Examples","title":"Examples","text":"ics = Dict([Na_aq => 0.0, SO4_g => 10.0, NH3_g => 4.250, HNO3_g => 0.145, HCl_g => 0.0,\n    Ca_aq => 0.080, K_aq => 0.090, Mg_aq => 0.000]) # ug/m3\nu₀1, sols1 = run_rh_sweep(sys, RHs, ics, mstable=0);\nu₀2, sols2 = run_rh_sweep(sys, RHs, ics, mstable=1);\nnothing # hide","category":"page"},{"location":"isorropia/examples/","page":"Examples","title":"Examples","text":"p1 = plot(RHs, [sols1[i][W][end] * 1e9 for i ∈ 1:length(RHs)], ylim=(0, 50),\n    ylabel=\"H2O (ug/m3)\", xlabel=\"Relative humidity (%)\", label=\"Stable\")\nplot!(p1, RHs, [sols2[i][W][end] * 1e9 for i ∈ 1:length(RHs)], ylim=(0, 50), label=\"Metastable\")\nps = []\nfor v in [K_aq]\n    p = plot(RHs, [sols1[i][v][end] * 1e6 * mw[v] for i ∈ 1:length(RHs)],\n        ylabel=\"$v (ug/m3)\", xlabel=\"Relative humidity (%)\", label=\"Stable\")\n    plot!(p, RHs, [sols2[i][v][end] * 1e6 * mw[v] for i ∈ 1:length(RHs)], label=\"Metastable\")\n    push!(ps, p)\nend\nplot(p1, ps..., size=(600, 300))","category":"page"},{"location":"isorropia/implementation/","page":"Implementation details","title":"Implementation details","text":"This implementation of ISORROPIA II is based on the description by Fountoukis and Nenes (2007), and may differ from the FORTRAN model which the paper describes. Below, we describe the notable  differences in model specification and solution that we are aware of.","category":"page"},{"location":"isorropia/implementation/#Problem-formulation","page":"Implementation details","title":"Problem formulation","text":"","category":"section"},{"location":"isorropia/implementation/","page":"Implementation details","title":"Implementation details","text":"The ISORROPIA II FORTRAN model is formulated as a nonlinear system of equations, which is solved numerically. For example, the following equation represents the equilibrium between mathrmCa(NO3)2_(s) and  ( mathrmCa^2+_(aq) + mathrm2NO3^-_(aq) ):","category":"page"},{"location":"isorropia/implementation/","page":"Implementation details","title":"Implementation details","text":"K_eq = fracleft mathrmCa^2+ right left mathrmNO3^- right^2 gamma_mathrmCa^2+ gamma_NO3^- 1","category":"page"},{"location":"isorropia/implementation/","page":"Implementation details","title":"Implementation details","text":"where the numerator (left mathrmCa^2+ right left mathrmNO3^- right^2 gamma_mathrmCa^2+ gamma_NO3^-)  represents the activity of the aqueous salt, the denominator (1) represents the activity of the solid,  and K_eq is the equilibrium ratio of the two.","category":"page"},{"location":"isorropia/implementation/","page":"Implementation details","title":"Implementation details","text":"In this implementation, we instead formulate the system of reactions as a mass action problem with forward  and reverse kinetic reactions that arrive at an equilibrium over time.  Using this method, the above reaction is represented as:","category":"page"},{"location":"isorropia/implementation/","page":"Implementation details","title":"Implementation details","text":"mathrmCaNO32_s undersetgamma_p  gamma_r  K_eqstackrel1rightleftharpoons mathrmCa_aq + 2 mathrmNO3_aq","category":"page"},{"location":"isorropia/implementation/","page":"Implementation details","title":"Implementation details","text":"where ( gamma_p = gamma_mathrmCa^2+ gamma_NO3^- ) and ( gamma_r = 1  left mathrmCa(NO3)2_(s) right ).","category":"page"},{"location":"isorropia/implementation/","page":"Implementation details","title":"Implementation details","text":"The resulting chemical reaction network is converted into a system of ordinary differential equations and then solved. The advantage of this mass-action formulation is that it is numerically stable even without the extensive  numerical optimizations that are used in the FORTRAN version of ISORROPIA. However, we are turning a system that is represented as instantaneously reaching equilibrium into one that reaches equilibrium over time, so we need to make a choice about the timescale over which we want to reach equilibrium. We have found that in practice formulating the reaction rates as above results in equilibrium being reached in less than  10 seconds under typical conditions, which is fast enough compared to many gas-phase reactions that we can consider it  to be effectively instantaneous. However, to make the equilibrium occur more quickly or slowly we could simply multiply both forward and reverse reaction  rate constants by a constant factor.","category":"page"},{"location":"isorropia/implementation/#Deliquescence","page":"Implementation details","title":"Deliquescence","text":"","category":"section"},{"location":"isorropia/implementation/","page":"Implementation details","title":"Implementation details","text":"When interpolation between MRDH and DRH relative humidities as in Foungtoukis and Nenes (2007), we take mathrmRH_wet to be equal to the DRH of the species in question, rather than the DRH of the salt with the lowest DRH of the mixture  under consideration. (We do this for ease of implementation but would consider changing it if requested.)","category":"page"},{"location":"isorropia/implementation/#Compositional-invariance-with-RH-cycling","page":"Implementation details","title":"Compositional invariance with RH cycling","text":"","category":"section"},{"location":"isorropia/implementation/","page":"Implementation details","title":"Implementation details","text":"This is described in Section 3.2 of Fountoukis and Nenes (2007), but we do not do it  because it is not immediately clear how to do so in the mass-action framework we use here.","category":"page"},{"location":"isorropia/overview/#isorropia","page":"Overview","title":"Isorropia: Thermodynamic equilibrium model for K, Ca2, Mg, NH4, Na, SO4, NO3, Cl, and H2O aerosols","text":"","category":"section"},{"location":"isorropia/overview/#Model","page":"Overview","title":"Model","text":"","category":"section"},{"location":"isorropia/overview/","page":"Overview","title":"Overview","text":"This is an implementation of the ISORROPIA II model for thermodynamic equilibrium between gases, inorganic aerosols, solids, and water, as described in Fountoukis and Nenes (2007):","category":"page"},{"location":"isorropia/overview/","page":"Overview","title":"Overview","text":"Fountoukis, C. and Nenes, A., 2007. ISORROPIA II: a computationally efficient thermodynamic equilibrium model for K, Ca, Mg, NH4, Na, SO4, NO3, Cl, and H2O aerosols. Atmospheric Chemistry and Physics, 7(17), pp.4639-4659.","category":"page"},{"location":"isorropia/overview/","page":"Overview","title":"Overview","text":"We can create an instance of the model in the following manner:","category":"page"},{"location":"isorropia/overview/","page":"Overview","title":"Overview","text":"using Aerosol\nusing EarthSciMLBase\nusing ModelingToolkit, Catalyst\nusing Unitful\nusing DataFrames\n\n@variables t [unit = u\"s\", description = \"Time\"]\n\nmodel = Isorropia(t);\nnothing # hide","category":"page"},{"location":"isorropia/overview/","page":"Overview","title":"Overview","text":"To get a sense of the complexity involved, we can view a graph of the reaction network:","category":"page"},{"location":"isorropia/overview/","page":"Overview","title":"Overview","text":"Graph(model.rxn_sys)","category":"page"},{"location":"isorropia/overview/","page":"Overview","title":"Overview","text":"Before we run any simulations with the model we need to convert it into a system of differential equations. Below, we visualize just the first three of them:","category":"page"},{"location":"isorropia/overview/","page":"Overview","title":"Overview","text":"sys = structural_simplify(get_mtk(model))\nequations(sys)[1:3]","category":"page"},{"location":"isorropia/overview/#State-variables","page":"Overview","title":"State variables","text":"","category":"section"},{"location":"isorropia/overview/","page":"Overview","title":"Overview","text":"This system of equations contains the following state variables, which are the variables that will be solved for:","category":"page"},{"location":"isorropia/overview/","page":"Overview","title":"Overview","text":"function vars2dataframe(vars; include_defaults=true)\n    df = DataFrame(\n        :Name => [string(Symbolics.tosymbol(v, escape=false)) for v ∈ vars],\n        :Units => [ModelingToolkit.get_unit(v) for v ∈ vars],\n        :Description => [ModelingToolkit.getdescription(v) for v ∈ vars])\n    if include_defaults\n        df.Default = [ModelingToolkit.getdefault(v) for v ∈ vars]\n    end\n    df\nend\n\nvars2dataframe(states(sys))","category":"page"},{"location":"isorropia/overview/#Parameters","page":"Overview","title":"Parameters","text":"","category":"section"},{"location":"isorropia/overview/","page":"Overview","title":"Overview","text":"The model also has the following parameters, which are variables that are not solved for but can vary  from simulation to simulation (there are are also constants, which we are filtering out):","category":"page"},{"location":"isorropia/overview/","page":"Overview","title":"Overview","text":"vars2dataframe(parameters(sys)[[!ModelingToolkit.isconstant(p) for p in parameters(sys)]])","category":"page"},{"location":"isorropia/overview/#Observed-variables","page":"Overview","title":"Observed variables","text":"","category":"section"},{"location":"isorropia/overview/","page":"Overview","title":"Overview","text":"Finally, the model has the following observed variables, which are variables that can be solved for by the system but are not strictly necessary to specify the system state:","category":"page"},{"location":"isorropia/overview/","page":"Overview","title":"Overview","text":"vars2dataframe([eq.lhs for eq in observed(sys)]; include_defaults=false)","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Aerosol","category":"page"},{"location":"#Aerosol.jl:-Symbolic-equation-based-aerosol-modeling","page":"Home","title":"Aerosol.jl: Symbolic equation-based aerosol modeling","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Aerosol.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install Aerosol.jl, use the Julia package manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"Aerosol\")","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Currently, we have a mostly-working version of the Isorropia aerosol thermodynamics model.","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"...coming soon","category":"page"},{"location":"#Reproducibility","page":"Home","title":"Reproducibility","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<details><summary>The documentation of this EarthSciML package was built using these direct dependencies,</summary>","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg # hide\nPkg.status() # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"</details>","category":"page"},{"location":"","page":"Home","title":"Home","text":"<details><summary>and using this machine and Julia version.</summary>","category":"page"},{"location":"","page":"Home","title":"Home","text":"using InteractiveUtils # hide\nversioninfo() # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"</details>","category":"page"},{"location":"","page":"Home","title":"Home","text":"<details><summary>A more complete overview of all dependencies and their versions is also provided.</summary>","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg # hide\nPkg.status(; mode = PKGMODE_MANIFEST) # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"</details>","category":"page"},{"location":"","page":"Home","title":"Home","text":"using TOML\nusing Markdown\nversion = TOML.parse(read(\"../../Project.toml\", String))[\"version\"]\nname = TOML.parse(read(\"../../Project.toml\", String))[\"name\"]\nlink_manifest = \"https://github.com/SciML/\" * name * \".jl/tree/gh-pages/v\" * version *\n                \"/assets/Manifest.toml\"\nlink_project = \"https://github.com/SciML/\" * name * \".jl/tree/gh-pages/v\" * version *\n               \"/assets/Project.toml\"\nMarkdown.parse(\"\"\"You can also download the\n[manifest]($link_manifest)\nfile and the\n[project]($link_project)\nfile.\n\"\"\")","category":"page"}]
}
